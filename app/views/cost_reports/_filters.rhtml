<%
  add_issue_filter_select = [["", ""]]
  add_cost_filter_select = [["", ""]]
%>

<script type="text/javascript">
  //<![CDATA[
  
  var Filterform = Class.create({
    lineIndex: 1,
    parentElement: "",
    initialize: function(filters, lineIndex, parentElement) {
      this.filters        = filters;
      this.lineIndex      = lineIndex;
      this.parentElement  = parentElement;
    },

    add_html: function(e, scope, key, insertion) {
      new Ajax.Updater({ success: e.identify() }, '<%= url_for(:action => :get_filter) %>', {
        parameters: {
          scope: scope,
          column_name: key,
          line_index: this.lineIndex++
        },
        insertion: insertion,
        evalScripts: true
      });
    },

    add: function(scope, key) {
      var e = $(this.parentElement);
      this.add_html(e, scope, key, "bottom")
      return this.lineIndex-1;
    }
  });
  
  multiFilters = new Hash();
  <% @query.available_filters.each_pair do |scope, available_filters| -%>
    multiFilters.set('<%= scope %>', [<%= available_filters.select{|k,v| CostQuery.filter_types[v[:type]][:multiple]}.collect{|k,v| "'#{k}'"}.join(", ") %>]);
  <%- end %>
  
  
  function reset_select(select) {
    select.selectedIndex = 0;
  }
  
  function add_filter(select, scope) {
    var column_name = select.value;
    if (!column_name) {
      return reset_select(select);
    }
    
    var filter_id = filterform.add(scope, column_name);
    select.selectedIndex = 0;
  }
  
  function toggle_filter(filter) {
      var check_box = filter.down("input[type=checkbox]")

      if (check_box.checked) {
        filter.down("select.filter_operator").show();
        toggle_operator(filter);
      } else {
        filter.down("select.filter_operator").hide();
        filter.down("div.filter_values").hide();
    }
  }
  
  function toggle_operator(filter) {
    var operator = filter.down("select.filter_operator");
    var simple_operators = [<%= CostQuery.operators.select{|k,v| v[:simple]}.collect{|k,v| "'#{k}'"}.join(", ") %>]
    
    var values_field = filter.down("div.filter_values");
    
    if (simple_operators.include(operator.value)) {
      values_field.hide();
    } else {
      values_field.show();
    }
  }
  
  function toggle_multi_select(filter) {
    var select = filter.down("div.filter_values").down("select");
    if (select.readAttribute("multiple")) {
      select.writeAttribute("multiple", null);
    } else {
      select.writeAttribute("multiple", "multiple");
    }
  }
  
  
  IssueFilterTypes = new Array();
  <% 
  @query.available_filters[:issues].sort_by{|c| c[1][:order]}.each do |e|
    column_name = e[0]
    filter = @query.create_filter(:issues, column_name)
    add_issue_filter_select << [filter.label, column_name]
  -%>
    IssueFilterTypes.push('<%= escape_javascript(column_name) %>');
  <% end %>  
  
  CostEntryFilterTypes = new Array()
  <%
  @query.available_filters[:costs].sort_by{|c| c[1][:order]}.each do |e|
    column_name = e[0]
    filter = @query.create_filter(:costs, column_name)
    add_cost_filter_select << [filter.label, column_name]
  %>
    CostEntryFilterTypes.push('<%= escape_javascript(column_name) %>');
  <% end %>  
  
  filterform = new Filterform($H({issues: IssueFilterTypes, costs: CostEntryFilterTypes}), <%= @query.filters ? @query.filters.length : 0 %>, 'filter_table');
  //]]>
</script>

<table width="100%">
  <tbody><tr>
    <td><table id="filter_table">
      <% @query.filters.each_with_index do |filter, index| %>
        <%= render(:partial => "filter", :object => @query.create_filter_from_hash(filter), :locals => {:index => index}) %>
      <% end if @query.filters %>
    </table></td>
    <td class="add-filter">
      <%= l(:label_cost_filter_add) %>: <%= select_tag 'add_cost_filter_select', options_for_select(add_cost_filter_select),
        :onchange => "add_filter(this, 'costs');",
        :class => "select-small",
        :name => nil %><br />
      
      <%= l(:label_issue_filter_add) %>: <%= select_tag 'add_issue_filter_select', options_for_select(add_issue_filter_select),
        :onchange => "add_filter(this, 'issues');",
        :class => "select-small",
        :name => nil %>
    </td>
  </tr></tbody>
</table>